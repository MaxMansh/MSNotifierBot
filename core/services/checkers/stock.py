from datetime import datetime
from typing import List, Dict, Optional
from collections import defaultdict
from core.entities.product import Product
from core.services.checkers.base import BaseChecker
from aiogram import html
from utils.logger import AppLogger

logger = AppLogger().get_logger(__name__)

class StockChecker(BaseChecker):
    async def process(self, products: List[Product]) -> None:
        cache = self.cache_manager.load()
        alerts_by_group = defaultdict(list)
        processed_count = 0
        alerted_count = 0
        stats = {'zero_stock': 0, 'below_min': 0}  # –î–æ–±–∞–≤–ª—è–µ–º stats

        for product in filter(lambda p: p.needs_stock_check, products):
            alert = self._check_product(product, cache, stats)  # –ü–µ—Ä–µ–¥–∞–µ–º stats
            if alert:
                alerts_by_group[product.group_path].append(alert)
                alerted_count += 1
            processed_count += 1

        if alerts_by_group:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {alerted_count}")
            for group_path, alerts in alerts_by_group.items():
                header = f"üìä {html.bold('–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–û –û–°–¢–ê–¢–ö–ê–ú')} ({group_path})"
                await self.notifier.send(header, alerts)

        self.cache_manager.save(cache)
        logger.info(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
            f"\n–¢–æ–≤–∞—Ä–æ–≤: {processed_count} "
            f"\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {alerted_count} "
            f"\n–ù—É–ª–µ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {stats['zero_stock']} "
            f"\n–ù–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞: {stats['below_min']}"
        )

    def _check_product(self, product: Product, cache: Dict, stats: dict) -> Optional[str]:
        cached_data = cache.get(product.id, {})
        current_stock = product.stock
        min_balance = product.min_balance
        alert = None

        is_zero = current_stock <= 0
        is_below_min = current_stock <= min_balance
        was_below_min = cached_data.get('below_min_reported', False)
        last_stock = cached_data.get('last_stock', None)

        logger.debug(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–∞ {product.name} (ID: {product.id}): "
            f"–æ—Å—Ç–∞—Ç–æ–∫={current_stock}, –º–∏–Ω–∏–º—É–º={min_balance}, "
            f"–±—ã–ª –Ω–∏–∂–µ –º–∏–Ω={was_below_min}, –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫={last_stock}"
        )

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω—É–ª–µ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
        if is_zero:
            stats['zero_stock'] += 1
            if not cached_data.get('zero_reported', False):
                alert = self._create_zero_stock_alert(product)
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω—É–ª–µ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫: {product.name} (ID: {product.id})")
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
        elif is_below_min:
            stats['below_min'] += 1

            # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–¥–Ω—è–ª—Å—è –≤—ã—à–µ –º–∏–Ω–∏–º—É–º–∞ –∏ —Å–Ω–æ–≤–∞ —É–ø–∞–ª
            if not was_below_min or (last_stock is not None and last_stock > min_balance):
                alert = self._create_min_balance_alert(product)
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞: {product.name} (ID: {product.id})")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        cache[product.id] = {
            'below_min_reported': is_below_min,
            'zero_reported': is_zero,
            'last_stock': current_stock,
            'last_check': datetime.now().isoformat()
        }

        return alert

    def _create_min_balance_alert(self, product: Product) -> str:
        return (
            f"‚ö†Ô∏è {html.bold(f'–¢–æ–≤–∞—Ä: {product.name} –¥–æ—Å—Ç–∏–≥ –º–∏–Ω–∏–º—É–º–∞!')}\n"
            f"‚ñ∏ –û—Å—Ç–∞—Ç–æ–∫: {int(product.stock)} (–º–∏–Ω–∏–º—É–º: {int(product.min_balance)})\n"
            f"‚ñ∏ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

    def _create_zero_stock_alert(self, product: Product) -> str:
        return (
            f"üõëÔ∏è {html.bold(f'–¢–æ–≤–∞—Ä: {product.name} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!')}\n"
            f"‚ñ∏ –û—Å—Ç–∞—Ç–æ–∫: {int(product.stock)} (–º–∏–Ω–∏–º—É–º: {int(product.min_balance)})\n"
            f"‚ñ∏ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )