from datetime import datetime
from typing import List, Dict, Optional
from collections import defaultdict
from core.entities.product import Product
from core.services.checkers.base import BaseChecker
from aiogram import html
import logging

logger = logging.getLogger(__name__)

class StockChecker(BaseChecker):
    async def process(self, products: List[Product]) -> None:
        cache = self.cache_manager.load()
        alerts_by_group = defaultdict(list)
        processed_count = 0
        alerted_count = 0

        for product in filter(lambda p: p.needs_stock_check, products):
            alert = self._check_product(product, cache)
            if alert:
                alerts_by_group[product.group_path].append(alert)
                alerted_count += 1
            processed_count += 1

        if alerts_by_group:
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {alerted_count}")
            for group_path, alerts in alerts_by_group.items():
                header = f"üìä {html.bold('–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–û –û–°–¢–ê–¢–ö–ê–ú')} ({group_path})"
                await self.notifier.send(header, alerts)

        self.cache_manager.save(cache)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–æ–≤–∞—Ä–æ–≤: {processed_count}, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {alerted_count}")

    def _check_product(self, product: Product, cache: Dict) -> Optional[str]:
        cached_data = cache.get(product.id, {})
        current_stock = product.stock
        min_balance = product.min_balance
        alert = None

        if current_stock <= min_balance and not cached_data.get('below_min_reported', False):
            alert = self._create_min_balance_alert(product)
            cache[product.id] = {
                'below_min_reported': True,
                'zero_reported': False,
                'last_stock': current_stock
            }
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            cache[product.id] = {
                'below_min_reported': cached_data.get('below_min_reported', False),
                'zero_reported': cached_data.get('zero_reported', False),
                'last_stock': current_stock
            }

        return alert

    def _create_min_balance_alert(self, product: Product) -> str:
        return (
            f"‚ö†Ô∏è {html.bold(f'–¢–æ–≤–∞—Ä: {product.name} –¥–æ—Å—Ç–∏–≥ –º–∏–Ω–∏–º—É–º–∞!')}\n"
            f"‚ñ∏ –û—Å—Ç–∞—Ç–æ–∫: {int(product.stock)} (–º–∏–Ω–∏–º—É–º: {int(product.min_balance)})\n"
            f"‚ñ∏ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

    def _create_zero_stock_alert(self, product: Product) -> str:
        return (
            f"üõëÔ∏è {html.bold(f'–¢–æ–≤–∞—Ä: {product.name} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!')}\n"
            f"‚ñ∏ –û—Å—Ç–∞—Ç–æ–∫: {int(product.stock)} (–º–∏–Ω–∏–º—É–º: {int(product.min_balance)})\n"
            f"‚ñ∏ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )