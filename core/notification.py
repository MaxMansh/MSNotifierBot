import asyncio
from aiogram import Bot, html
from aiogram.enums import ParseMode
from typing import List
from datetime import datetime
from utils.logger import AppLogger
from core.entities.product import Product

logger = AppLogger().get_logger(__name__)

class ExpirationAlert:
    def create_expiration_header(group_path: str) -> str:
        return f"‚è≥ {html.bold('–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–û –°–†–û–ö–ê–ú –ì–û–î–ù–û–°–¢–ò')} ({group_path})"

    def create_expired_alert(product: Product) -> str:
        return (
            f"üö® {html.bold('–ü–†–û–°–†–û–ß–ï–ù–ù–´–ô –¢–û–í–ê–†')}\n"
            f"‚ñ∏ –¢–æ–≤–∞—Ä: {product.name}\n"
            f"‚ñ∏ –°—Ä–æ–∫ –∏—Å—Ç—ë–∫: {product.expiration_date.strftime('%d.%m.%Y')}"
        )

    def create_near_expired_alert(product: Product, days_left: int) -> str:
        emoji = "üî¥" if days_left <= 3 else "üü°"
        return (
            f"{emoji} {html.bold('–¢–û–í–ê–† –° –ò–°–¢–ï–ö–ê–Æ–©–ò–ú –°–†–û–ö–û–ú')}\n"
            f"‚ñ∏ –¢–æ–≤–∞—Ä: {product.name}\n"
            f"‚ñ∏ –°—Ä–æ–∫: {product.expiration_date.strftime('%d.%m.%Y')}\n"
            f"‚ñ∏ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
        )

class StockAlert:
    def create_stock_header(group_path: str) -> str:
        return f"üìä {html.bold('–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ü–û –û–°–¢–ê–¢–ö–ê–ú')} ({group_path})"

    def create_min_balance_alert(product: Product) -> str:
        return (
            f"‚ö†Ô∏è {html.bold(f'–¢–æ–≤–∞—Ä: {product.name} –¥–æ—Å—Ç–∏–≥ –º–∏–Ω–∏–º—É–º–∞!')}\n"
            f"‚ñ∏ –û—Å—Ç–∞—Ç–æ–∫: {int(product.stock)} (–º–∏–Ω–∏–º—É–º: {int(product.min_balance)})\n"
            f"‚ñ∏ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

    def create_zero_stock_alert(product: Product) -> str:
        return (
            f"üõëÔ∏è {html.bold(f'–¢–æ–≤–∞—Ä: {product.name} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!')}\n"
            f"‚ñ∏ –û—Å—Ç–∞—Ç–æ–∫: {int(product.stock)} (–º–∏–Ω–∏–º—É–º: {int(product.min_balance)})\n"
            f"‚ñ∏ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

class TelegramNotifier:
    def __init__(self, bot: Bot, chat_id: str, message_limit: int = 4096):
        self.bot = bot
        self.chat_id = chat_id
        self.message_limit = message_limit

    async def send(self, header: str, messages: List[str]) -> bool:
        if not messages:
            logger.info("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return False

        try:
            full_message = f"{header}\n\n" + "\n\n".join(messages)
            if len(full_message) <= self.message_limit:
                await self._send_message(full_message)
            else:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –¥–ª–∏–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞.")
                await self._send_batched(header, messages)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False

    async def _send_batched(self, header: str, messages: List[str]) -> None:
        logger.info("–ù–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        current_message = header + "\n\n"

        for msg in messages:
            if len(current_message) + len(msg) + 2 > self.message_limit:
                await self._send_message(current_message.strip())
                current_message = ""
                await asyncio.sleep(1)

            current_message += msg + "\n\n"

        if current_message.strip():
            await self._send_message(current_message.strip())

    async def _send_message(self, text: str) -> None:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.")
        await self.bot.send_message(
            chat_id=self.chat_id,
            text=text,
            parse_mode=ParseMode.HTML
        )