import os
from datetime import datetime, timedelta
from collections import defaultdict
from aiogram import Router, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.api.moysklad import MoyskladAPI
from core.infrastructure import CacheManager
from core.config import Settings, PathManager
from core.infrastructure import AppLogger

router = Router()
logger = AppLogger().get_logger(__name__)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
bot_stats = defaultdict(int)
active_users = set()


class AccessControlStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º"""
    CHOOSE_ACTION = State()  # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º
    ADD_USER = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    REMOVE_USER = State()  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ADD_ADMIN = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    REMOVE_ADMIN = State()  # –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    VIEW_LOG_FILE = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤


class CacheControlStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º"""
    CHOOSE_ACTION = State()  # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º


def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    buttons = [
        [KeyboardButton(text="üìÅ –õ–æ–≥–∏"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º"), KeyboardButton(text="‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"), KeyboardButton(text="üîë –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def get_access_control_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º."""
    buttons = [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"), KeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def get_cache_control_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º."""
    buttons = [
        [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"), KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


@router.message(F.text == "üìÅ –õ–æ–≥–∏")
async def handle_logs(message: Message, state: FSMContext, paths: PathManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    AppLogger().log_user_activity(message.from_user, "–ó–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤")
    try:
        log_files = sorted(os.listdir(paths.logs_dir), reverse=True)
        if not log_files:
            await message.answer("üü¢ –õ–æ–≥-—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        buttons = []
        for file_name in log_files[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ñ–∞–π–ª–∞–º–∏
            buttons.append([KeyboardButton(text=file_name)])

        buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

        await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥-—Ñ–∞–π–ª:", reply_markup=keyboard)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(log_files=log_files)
        await state.set_state(AccessControlStates.VIEW_LOG_FILE)

    except Exception as e:
        AppLogger().log_user_activity(message.from_user, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤", f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤.")


@router.message(AccessControlStates.VIEW_LOG_FILE)
async def handle_view_log_file(message: Message, state: FSMContext, paths: PathManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫."""
    try:
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())
            return

        data = await state.get_data()
        log_files = data.get("log_files", [])

        if message.text not in log_files:
            AppLogger().log_user_activity(message.from_user, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞", f"–ò–º—è —Ñ–∞–π–ª–∞: {message.text}")
            await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        log_path = paths.logs_dir / message.text
        if not log_path.exists():
            AppLogger().log_user_activity(message.from_user, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", f"–ò–º—è —Ñ–∞–π–ª–∞: {message.text}")
            await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await message.answer_document(
            document=types.FSInputFile(log_path),
            caption=f"üìÑ –í–æ—Ç –≤–∞—à –ª–æ–≥-—Ñ–∞–π–ª: {message.text}"
        )
        AppLogger().log_user_activity(message.from_user, "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–æ–≥-—Ñ–∞–π–ª", f"–ò–º—è —Ñ–∞–π–ª–∞: {message.text}")

        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await state.clear()
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())

    except Exception as e:
        AppLogger().log_user_activity(message.from_user, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥-—Ñ–∞–π–ª–∞", f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.")
        await state.clear()
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    AppLogger().log_user_activity(message.from_user, "–ó–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: {bot_stats['add_number']}\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {bot_stats['success']}\n"
        f"‚Ä¢ –û—à–∏–±–æ–∫: {bot_stats['failed']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}"
    )
    await message.answer(stats_text, parse_mode="HTML")


@router.message(F.text == "üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
async def handle_cache_control_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º."""
    AppLogger().log_user_activity(message.from_user, "–û—Ç–∫—Ä—ã–ª –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º")
    await state.set_state(CacheControlStates.CHOOSE_ACTION)
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º:",
        reply_markup=get_cache_control_keyboard()
    )


@router.message(CacheControlStates.CHOOSE_ACTION)
async def handle_cache_action(message: Message, state: FSMContext, phone_cache: CacheManager, api: MoyskladAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—ç—à–µ–º."""
    AppLogger().log_user_activity(message.from_user, f"–í—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫—ç—à–µ: {message.text}")

    if message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤":
        await message.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...")
        try:
            success = await api.initialize_counterparties_cache(phone_cache)
            if success:
                await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

    elif message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à":
        await message.answer("üîÑ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
        try:
            phone_cache.clear_cache()
            await message.answer("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}")

    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())

    await state.clear()


@router.message(F.text == "‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
async def handle_next_check(message: Message, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    AppLogger().log_user_activity(message.from_user, "–ó–∞–ø—Ä–æ—Å–∏–ª –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    next_check = datetime.now() + timedelta(minutes=config.CHECK_INTERVAL_MINUTES)
    await message.answer(f"‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ {next_check.strftime('%H:%M:%S')}.")


@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
async def handle_bot_info(message: Message, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ."""
    AppLogger().log_user_activity(message.from_user, "–ó–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
    bot_info = (
        "ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n\n"
        f"‚Ä¢ –í–µ—Ä—Å–∏—è: 1.0.0\n"
        f"‚Ä¢ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å API: {'üü¢ –†–∞–±–æ—Ç–∞–µ—Ç' if config.MS_TOKEN else 'üî¥ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}"
    )
    await message.answer(bot_info, parse_mode="HTML")


@router.message(F.text == "üîë –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
async def handle_access_control(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º."""
    AppLogger().log_user_activity(message.from_user, "–û—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
    await state.set_state(AccessControlStates.CHOOSE_ACTION)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_access_control_keyboard()
    )


@router.message(AccessControlStates.CHOOSE_ACTION)
async def handle_access_action(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–æ–º."""
    AppLogger().log_user_activity(message.from_user, f"–í—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {message.text}")
    match message.text:
        case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            await state.set_state(AccessControlStates.ADD_USER)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        case "‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            await state.set_state(AccessControlStates.REMOVE_USER)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        case "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞":
            await state.set_state(AccessControlStates.ADD_ADMIN)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞:")
        case "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞":
            await state.set_state(AccessControlStates.REMOVE_ADMIN)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∞:")
        case "üîô –ù–∞–∑–∞–¥":
            await state.clear()
            await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())


@router.message(F.text, AccessControlStates.ADD_USER)
async def handle_add_user(message: Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await _handle_access_change(message, state, config, "user", "add")


@router.message(F.text, AccessControlStates.REMOVE_USER)
async def handle_remove_user(message: Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await _handle_access_change(message, state, config, "user", "remove")


@router.message(F.text, AccessControlStates.ADD_ADMIN)
async def handle_add_admin(message: Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞."""
    await _handle_access_change(message, state, config, "admin", "add")


@router.message(F.text, AccessControlStates.REMOVE_ADMIN)
async def handle_remove_admin(message: Message, state: FSMContext, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞."""
    await _handle_access_change(message, state, config, "admin", "remove")


async def _handle_access_change(message: Message, state: FSMContext, config: Settings, user_type: str, action: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."""
    try:
        user_id = int(message.text)
        AppLogger().log_user_activity(message.from_user, f"–ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–ª—è ID {user_id}")

        if user_type == "user":
            ids_list = config.ALLOWED_USER_IDS
            role_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        else:
            ids_list = config.ADMIN_USER_IDS
            role_name = "–ê–¥–º–∏–Ω"

        if action == "add":
            if user_id not in ids_list:
                ids_list.append(user_id)
                await message.answer(f"‚úÖ {role_name} {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
            else:
                await message.answer(f"‚ÑπÔ∏è {role_name} {user_id} —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        else:
            if user_id in ids_list:
                ids_list.remove(user_id)
                await message.answer(f"‚úÖ {role_name} {user_id} —É–¥–∞–ª–µ–Ω.")
            else:
                await message.answer(f"‚ÑπÔ∏è {role_name} {user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

    except ValueError:
        AppLogger().log_user_activity(message.from_user, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", f"ID: {message.text}")
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")

    await state.clear()