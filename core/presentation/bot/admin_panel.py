import os
from aiogram import Router, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.api.moysklad import MoyskladAPI
from core.infrastructure import CacheManager
from core.config import PathManager
from core.infrastructure import AppLogger

router = Router()
logger = AppLogger().get_logger(__name__)

class AccessControlStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤"""
    VIEW_LOG_FILE = State()

class CacheControlStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º"""
    CHOOSE_ACTION = State()

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    buttons = [
        [KeyboardButton(text="üìÅ –õ–æ–≥–∏"), KeyboardButton(text="üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_cache_control_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º"""
    buttons = [
        [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤"), KeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_log_files_keyboard(log_files: list) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤"""
    buttons = [[KeyboardButton(text=file_name)] for file_name in log_files[:10]]
    buttons.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@router.message(F.text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def show_admin_panel(message: Message):
    """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())

@router.message(F.text == "üìÅ –õ–æ–≥–∏")
async def handle_logs(message: Message, state: FSMContext, paths: PathManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤"""
    try:
        log_files = sorted(os.listdir(paths.logs_dir), reverse=True)
        if not log_files:
            await message.answer("üü¢ –õ–æ–≥-—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥-—Ñ–∞–π–ª:",
            reply_markup=get_log_files_keyboard(log_files)
        )
        await state.set_state(AccessControlStates.VIEW_LOG_FILE)
        await state.update_data(log_files=log_files)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–æ–≥–æ–≤.")

@router.message(AccessControlStates.VIEW_LOG_FILE)
async def handle_log_selection(message: Message, state: FSMContext, paths: PathManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await show_admin_panel(message)
        return

    data = await state.get_data()
    log_files = data.get("log_files", [])

    if message.text not in log_files:
        await message.answer("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    log_path = paths.logs_dir / message.text
    if not log_path.exists():
        await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        await message.answer_document(
            document=types.FSInputFile(log_path),
            caption=f"üìÑ –í–æ—Ç –≤–∞—à –ª–æ–≥-—Ñ–∞–π–ª: {message.text}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.")

@router.message(F.text == "üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
async def handle_cache_control_menu(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º"""
    await state.set_state(CacheControlStates.CHOOSE_ACTION)
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º:",
        reply_markup=get_cache_control_keyboard()
    )

@router.message(CacheControlStates.CHOOSE_ACTION)
async def handle_cache_action(message: Message, state: FSMContext, phone_cache: CacheManager, api: MoyskladAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∫—ç—à–µ–º"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await show_admin_panel(message)
        return

    try:
        if message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤":
            msg = await message.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤...")
            try:
                success = await api.initialize_counterparties_cache(phone_cache)
                await msg.edit_text("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!" if success
                                   else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤")
            except Exception as e:
                await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

        elif message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à":
            msg = await message.answer("üîÑ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...")
            try:
                phone_cache.clear_cache()
                await msg.edit_text("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
            except Exception as e:
                await msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {str(e)}")

        await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º:", reply_markup=get_cache_control_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫—ç—à–∞: {str(e)}")
        await state.clear()
        await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())
