import aiohttp
import asyncio
import pandas as pd
import re
from aiogram import Router, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from core.api.moysklad import MoyskladAPI
from core.infrastructure import CacheManager
from core.config import Settings
from core.infrastructure import AppLogger
from io import BytesIO
from typing import List, Optional, Tuple
from .admin_panel import router as admin_router, get_admin_keyboard

router = Router()
router.include_router(admin_router)
logger = AppLogger().get_logger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
BATCH_SIZE = 20  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏


class CounterpartyCreationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞."""
    ACTIVE = State()  # –†–µ–∂–∏–º "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞" –∞–∫—Ç–∏–≤–µ–Ω


@router.message.middleware()
async def check_access_middleware(handler, event: types.Message, data: dict):
    """–ú–∏–¥–ª–≤–∞—Ä—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞."""
    config: Settings = data.get("config")
    if not config:
        logger.error("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
        return False

    user_id = event.from_user.id
    if user_id not in config.ALLOWED_USER_IDS:
        AppLogger().log_user_activity(event.from_user, "–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
        await event.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    return await handler(event, data)


router.message.middleware(check_access_middleware)


def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    buttons = [
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞"), KeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def get_back_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )


def get_counterparty_mode_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞."""
    buttons = [
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def extract_phone(text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π/—Ä–æ—Å—Å–∏–π—Å–∫–∏–π)."""
    if not text or not any(char.isdigit() for char in text):
        return None

    clean_phone = re.sub(r'\D', '', text)

    # –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ (+375/80)
    if clean_phone.startswith('375') and len(clean_phone) == 12:
        return clean_phone[3:5] + clean_phone[5:]
    elif clean_phone.startswith('80') and len(clean_phone) == 11:
        return clean_phone[2:4] + clean_phone[4:]

    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ (+7/8)
    elif clean_phone.startswith('7') and len(clean_phone) == 11:
        return clean_phone[1:4] + clean_phone[4:]
    elif clean_phone.startswith('8') and len(clean_phone) == 11:
        return clean_phone[1:4] + clean_phone[4:]

    # –£–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    elif len(clean_phone) in (9, 10):
        return clean_phone

    return None


async def process_excel(file: BytesIO) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞."""
    try:
        df = pd.read_excel(file, usecols=['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'])
        phones = [extract_phone(str(phone)) for phone in df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']]
        return list(set(filter(None, phones)))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel: {str(e)}", exc_info=True)
        return []


async def process_batch(session: aiohttp.ClientSession,
                        batch: List[str],
                        api: MoyskladAPI,
                        phone_cache: CacheManager) -> Tuple[int, int, List[str]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç –Ω–æ–º–µ—Ä–æ–≤."""
    success, skipped, errors = 0, 0, []

    for phone in batch:
        if phone_cache.has_counterparty(phone):
            skipped += 1
            continue

        try:
            if await api.create_counterparty(session, phone):
                phone_cache.add_counterparty(phone, "individual")
                success += 1
            else:
                errors.append(phone)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {phone}: {str(e)}")
            errors.append(phone)

    return success, skipped, errors


@router.message(Command("start"))
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    AppLogger().log_user_activity(message.from_user, "–ù–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º", "–ö–æ–º–∞–Ω–¥–∞ /start")
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –ú–æ–π–°–∫–ª–∞–¥</b>!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å Excel-—Ñ–∞–π–ª—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
    )
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=get_main_keyboard())


@router.message(F.text == "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin_panel(message: Message, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
    AppLogger().log_user_activity(message.from_user, "–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")

    if message.from_user.id not in config.ADMIN_USER_IDS:
        AppLogger().log_user_activity(message.from_user, "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    AppLogger().log_user_activity(message.from_user, "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    await message.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())


@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É."""
    AppLogger().log_user_activity(message.from_user, "–ó–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")
    help_text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞</b> - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ <b>–ó–∞–≥—Ä—É–∑–∫–∞ Excel</b> - –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ (–∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ')\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_main_keyboard())


@router.message(Command("status"))
@router.message(F.text == "üîÑ –°—Ç–∞—Ç—É—Å")
async def check_status(message: Message, api: MoyskladAPI):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API."""
    AppLogger().log_user_activity(message.from_user, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API")
    try:
        async with aiohttp.ClientSession() as session:
            if await api.check_connection(session):
                AppLogger().log_user_activity(message.from_user, "–ü—Ä–æ–≤–µ—Ä–∫–∞ API", "API –¥–æ—Å—Ç—É–ø–µ–Ω")
                await message.answer("üü¢ API –ú–æ–π–°–∫–ª–∞–¥ –¥–æ—Å—Ç—É–ø–µ–Ω", reply_markup=get_main_keyboard())
            else:
                AppLogger().log_user_activity(message.from_user, "–ü—Ä–æ–≤–µ—Ä–∫–∞ API", "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                await message.answer("üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API", reply_markup=get_main_keyboard())
    except Exception as e:
        AppLogger().log_user_activity(message.from_user, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API", f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", reply_markup=get_main_keyboard())


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    current_state = await state.get_state()
    if current_state == CounterpartyCreationStates.ACTIVE:
        await state.clear()
        AppLogger().log_user_activity(message.from_user, "–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")
        await message.answer("‚ùå –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_keyboard())
    else:
        AppLogger().log_user_activity(message.from_user, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await handle_start(message)


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")
async def handle_counterparty_creation_start(message: Message, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞."""
    await state.set_state(CounterpartyCreationStates.ACTIVE)
    AppLogger().log_user_activity(message.from_user, "–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")
    await message.answer(
        "üìù <b>–†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å Excel-—Ñ–∞–π–ª—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏\n\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –Ω–∞–∂–º–∏—Ç–µ <b>–ù–∞–∑–∞–¥</b>",
        parse_mode="HTML",
        reply_markup=get_counterparty_mode_keyboard()
    )


@router.message(F.text, CounterpartyCreationStates.ACTIVE)
async def handle_phone_number(message: Message, api: MoyskladAPI, phone_cache: CacheManager, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞."""
    AppLogger().log_user_activity(message.from_user, "–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", f"–¢–µ–∫—Å—Ç: {message.text}")

    if not (phone := extract_phone(message.text)):
        AppLogger().log_user_activity(message.from_user, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä", f"–í —Å–æ–æ–±—â–µ–Ω–∏–∏: {message.text}")
        await message.answer("üîç –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
                           reply_markup=get_counterparty_mode_keyboard())
        return

    AppLogger().log_user_activity(message.from_user, "–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", f"–ù–æ–º–µ—Ä: {phone}")

    if phone_cache.has_counterparty(phone):
        AppLogger().log_user_activity(message.from_user, "–ù–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", f"–ù–æ–º–µ—Ä: {phone}")
        await message.answer(f"‚ÑπÔ∏è –ù–æ–º–µ—Ä {phone} —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ",
                           reply_markup=get_counterparty_mode_keyboard())
        return

    for attempt in range(1, config.MAX_ATTEMPTS + 1):
        try:
            async with aiohttp.ClientSession() as session:
                if await api.create_counterparty(session, phone):
                    AppLogger().log_user_activity(message.from_user, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –Ω–æ–º–µ—Ä", f"–ù–æ–º–µ—Ä: {phone}")
                    phone_cache.add_counterparty(phone, "individual")
                    await message.answer(
                        f"‚úÖ –ù–æ–º–µ—Ä {phone} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                        reply_markup=get_counterparty_mode_keyboard()
                    )
                    return
        except Exception as e:
            AppLogger().log_user_activity(
                message.from_user,
                "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞",
                f"–ù–æ–º–µ—Ä: {phone}, –ø–æ–ø—ã—Ç–∫–∞ {attempt}, –æ—à–∏–±–∫–∞: {str(e)}"
            )
            if attempt < config.MAX_ATTEMPTS:
                await asyncio.sleep(config.RETRY_DELAY * attempt)

    AppLogger().log_user_activity(
        message.from_user,
        "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä",
        f"–ù–æ–º–µ—Ä: {phone} –ø–æ—Å–ª–µ {config.MAX_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫"
    )
    await message.answer(
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä {phone}",
        reply_markup=get_counterparty_mode_keyboard()
    )


@router.message(F.document, CounterpartyCreationStates.ACTIVE)
async def handle_excel_file(message: Message, api: MoyskladAPI, phone_cache: CacheManager, config: Settings):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞."""
    AppLogger().log_user_activity(
        message.from_user,
        "–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª",
        f"–ò–º—è —Ñ–∞–π–ª–∞: {message.document.file_name}, —Ä–∞–∑–º–µ—Ä: {message.document.file_size} –±–∞–π—Ç"
    )

    if not message.document.file_name.endswith(('.xlsx', '.xls')):
        AppLogger().log_user_activity(
            message.from_user,
            "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞",
            message.document.file_name
        )
        await message.answer(
            "‚ùå –ù—É–∂–µ–Ω —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)",
            reply_markup=get_counterparty_mode_keyboard()
        )
        return

    if message.document.file_size > MAX_FILE_SIZE:
        AppLogger().log_user_activity(
            message.from_user,
            "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
            f"–†–∞–∑–º–µ—Ä: {message.document.file_size} –±–∞–π—Ç"
        )
        await message.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10–ú–ë)",
            reply_markup=get_counterparty_mode_keyboard()
        )
        return

    try:
        file = await message.bot.download(message.document)
        phones = await process_excel(file)

        if not phones:
            AppLogger().log_user_activity(
                message.from_user,
                "–ù–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ",
                message.document.file_name
            )
            await message.answer(
                "üîç –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤",
                reply_markup=get_counterparty_mode_keyboard()
            )
            return

        total = len(phones)
        AppLogger().log_user_activity(
            message.from_user,
            "–ù–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞",
            f"–§–∞–π–ª: {message.document.file_name}, –Ω–æ–º–µ—Ä–æ–≤: {total}"
        )
        msg = await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ {total} –Ω–æ–º–µ—Ä–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞...",
            reply_markup=get_counterparty_mode_keyboard()
        )

        success, skipped, failed = 0, 0, []
        async with aiohttp.ClientSession() as session:
            for i in range(0, total, BATCH_SIZE):
                batch = phones[i:i + BATCH_SIZE]
                s, sk, f = await process_batch(session, batch, api, phone_cache)
                success += s
                skipped += sk
                failed.extend(f)

                current_processed = i + len(batch)
                if current_processed % BATCH_SIZE == 0 or current_processed == total:
                    try:
                        await msg.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current_processed}/{total}...")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                        msg = await message.answer(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {current_processed}/{total}...")

        result = (
            f"üìä <b>–ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:</b>\n\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{success}</b>\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): <b>{skipped}</b>\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: <b>{len(failed)}</b>"
        )
        AppLogger().log_user_activity(
            message.from_user,
            "–ó–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞",
            f"–§–∞–π–ª: {message.document.file_name}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
        )
        await message.answer(
            result,
            parse_mode="HTML",
            reply_markup=get_counterparty_mode_keyboard()
        )

    except Exception as e:
        AppLogger().log_user_activity(
            message.from_user,
            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞",
            f"–§–∞–π–ª: {message.document.file_name}, –æ—à–∏–±–∫–∞: {str(e)}"
        )
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞",
            reply_markup=get_counterparty_mode_keyboard()
        )