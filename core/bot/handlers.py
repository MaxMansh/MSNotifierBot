import re
import aiohttp
import pandas as pd
from aiogram import Router, F
from aiogram.types import Message, Document
from core.services.api.moysklad import MoyskladAPI
from io import BytesIO
from typing import Optional, List
from utils.logger import AppLogger
from aiogram.filters import Command
from utils.cacher import CacheManager

logger = AppLogger().get_logger(__name__)
router = Router()


@router.message(Command("start"))
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
        "–ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'"
    )
    await message.answer(welcome_text)


def extract_phone(text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return None
    clean_phone = re.sub(r'\D', '', text)
    return clean_phone if clean_phone else None


async def process_excel(file: BytesIO) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        df = pd.read_excel(file)
        if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in df.columns:
            return []

        phones = []
        for phone in df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].astype(str):
            if cleaned := extract_phone(phone):
                phones.append(cleaned)
        return phones
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel: {str(e)}")
        return []


@router.message(F.document)
async def handle_document(
        message: Message,
        api: MoyskladAPI,
        phone_cache: CacheManager
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö Excel-—Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—ç—à–∞"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if not message.document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx)")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
        file = await message.bot.download(message.document)
        phones = await process_excel(file)

        if not phones:
            await message.answer("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ")
            return

        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(phones)} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        success_count = 0
        skipped_count = 0
        async with aiohttp.ClientSession() as session:
            for phone in phones:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –∫—ç—à–µ
                if phone_cache.has_counterparty(phone):
                    logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞: {phone}")
                    skipped_count += 1
                    continue

                try:
                    if await api.create_counterparty(session, phone):
                        phone_cache.add_counterparty(phone, phone)
                        success_count += 1
                        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä: {phone}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ {phone}: {str(e)}")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        result_msg = (
            f"üìä –ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–º–µ—Ä–æ–≤: {len(phones)}\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {success_count}\n"
            f"‚Ä¢ –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {skipped_count}\n"
            f"‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {phones[0]}...{phones[-1] if len(phones) > 1 else ''}"
        )

        logger.info(result_msg)
        await message.answer(result_msg)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")


@router.message(F.text)
async def handle_text(
        message: Message,
        api: MoyskladAPI,
        phone_cache: CacheManager
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—ç—à–∞"""
    phone = extract_phone(message.text)
    if not phone:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –∫—ç—à–µ
    if phone_cache.has_counterparty(phone):
        logger.debug(f"–ù–æ–º–µ—Ä {phone} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await message.answer(f"‚ÑπÔ∏è –ù–æ–º–µ—Ä {phone} —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ")
        return

    try:
        async with aiohttp.ClientSession() as session:
            if await api.create_counterparty(session, phone):
                phone_cache.add_counterparty(phone, phone)
                await message.answer(f"‚úÖ –ù–æ–º–µ—Ä {phone} –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ {phone}: {str(e)}")
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")