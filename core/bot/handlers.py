import re
import aiohttp
import pandas as pd
from aiogram import Router, F
from aiogram.types import Message, Document
from core.services.api.moysklad import MoyskladAPI
from io import BytesIO
from typing import Optional, List
from utils.logger import AppLogger
from aiogram.filters import Command

logger = AppLogger().get_logger(__name__)
router = Router()

@router.message(Command("start"))
async def handle_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
        "–ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –Ω–æ–º–µ—Ä–∞–º–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'"
    )
    await message.answer(welcome_text)

def extract_phone(text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.debug(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞: '{text}'")

    if not text:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞")
        return None

    try:
        clean_phone = re.sub(r'\D', '', text)
        if not clean_phone:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞: '{text}'")
            return None

        logger.debug(f"–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –Ω–æ–º–µ—Ä: '{clean_phone}' –∏–∑ —Ç–µ–∫—Å—Ç–∞: '{text}'")
        return clean_phone
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –∏–∑ '{text}': {str(e)}")
        return None


async def process_excel(file: BytesIO) -> List[str]:
    """–ü–∞—Ä—Å–∏—Ç –Ω–æ–º–µ—Ä–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞")

    try:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        logger.debug("–ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞")
        df = pd.read_excel(file)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        if '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' not in df.columns:
            logger.error("–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'")
            return []

        phones = []
        logger.debug(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞")

        for idx, phone in enumerate(df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].astype(str)):
            try:
                cleaned = extract_phone(phone)
                if cleaned:
                    phones.append(cleaned)
                    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {idx + 1}: –Ω–æ–º–µ—Ä {cleaned}")
                else:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {idx + 1}: '{phone}' - –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {idx + 1} ('{phone}'): {str(e)}")

        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω Excel —Ñ–∞–π–ª. –ù–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {len(phones)}")
        return phones

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return []


@router.message(F.document)
async def handle_document(message: Message, api: MoyskladAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö Excel-—Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if not message.document.file_name.endswith(('.xlsx', '.xls')):
        error_msg = f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {message.document.file_name}"
        logger.error(error_msg)
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx)")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        logger.debug("–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram")
        file = await message.bot.download(message.document)
        logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
        logger.debug("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞")
        phones = await process_excel(file)

        if not phones:
            logger.warning("–í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞")
            await message.answer("üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª–µ")
            return

        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(phones)} –Ω–æ–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        success_count = 0
        async with aiohttp.ClientSession() as session:
            for idx, phone in enumerate(phones):
                try:
                    logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ {idx + 1}/{len(phones)}: {phone}")
                    if await api.create_counterparty(session, phone):
                        success_count += 1
                        logger.debug(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä: {phone}")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä: {phone}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ {phone}: {str(e)}")

        result_msg = (
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}/{len(phones)} –Ω–æ–º–µ—Ä–æ–≤\n"
            f"–ü—Ä–∏–º–µ—Ä: {phones[0]}...{phones[-1] if len(phones) > 1 else ''}"
        )

        logger.info(f"–ò—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {result_msg}")
        await message.answer(result_msg)

    except Exception as e:
        error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        logger.error(error_msg, exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")


@router.message(F.text)
async def handle_text(message: Message, api: MoyskladAPI):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: '{message.text}'")

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä /start)
    if message.text.startswith('/'):
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞
    phone = extract_phone(message.text)
    if not phone:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä: '{message.text}'")
        return  # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º

    try:
        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞: {phone}")
        async with aiohttp.ClientSession() as session:
            if await api.create_counterparty(session, phone):
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä: {phone}")
                await message.answer(f"‚úÖ –ù–æ–º–µ—Ä {phone} –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–º–µ—Ä–∞ {phone}: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")